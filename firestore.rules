rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user is an admin
    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Function to check if user is accessing their own document
    function isSelf(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      // Allow read if the user is authenticated and either an admin or reading their own document
      allow read: if isAuthenticated() && (isAdmin() || isSelf(userId));
      
      // Allow create if the user is authenticated (for registration)
      allow create: if isAuthenticated();
      
      // Allow update if user is admin or updating their own non-admin document
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (isSelf(userId) && !(resource.data.role == 'admin'))
      );
      
      // Allow delete only if user is admin
      allow delete: if isAdmin();
    }
    
    // Enquiries collection rules
    match /enquiries/{docId} {
      allow create: if true; // Anyone can submit an enquiry
      allow read, update, delete: if request.auth != null && 
                                   (request.auth.token.admin == true || 
                                    request.auth.email == "admin@example.com" || 
                                    request.auth.email == "abhiramak963@gmail.com");
    }
    
    // Other collections require authentication
    match /{collection}/{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}
